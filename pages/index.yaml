title:      Introduction to Artificial Intelligence
icon:       fa-rocket
navigation:
    - name: "Logistics"
      link: "#logistics"
      icon: "fa-cogs"
    - name: "Schedule"
      link: "#schedule"
      icon: "fa-calendar"
    - name: "Requirements"
      link: "#Requirements"
      icon: "fa-balance-scale"
    - name: "Resources"
      link: "#resources"
      icon: "fa-external-link"
internal:
external:
    tas:        'static/yaml/tas.yaml'
    schedule:   'static/yaml/schedule.yaml'
    semester_info: 'static/yaml/semester_info.yaml'
    resources:  'csv:static/csv/resources.csv'
body:       |

    {% set term_code = page.external['semester_info']['Term'][:2].lower() + page.external['semester_info']['Year'][-2:] %}


    {% set ta_colors = { 'jmangion': 'rgba(255, 204, 204, 0.5)', 'ccerves': 'rgba(204, 255, 204, 0.5)', 'tlohman': 'rgba(204, 204, 255, 0.5)', 'ozino': 'rgba(255, 255, 204, 0.5)', 'snoonan2': 'rgba(255, 204, 255, 0.5)', 'fseptien': 'rgba(204, 255, 255, 0.5)' } %}

    <div class="row" markdown="1">

    **CSE 30124** is an elective course in the [Computer Science and
    Engineering] program at the [University of Notre Dame]. This course
    serves as an introduction and gateway to upper level machine learning
    and artificial intelligence courses. In this course students will
    learn the fundamentals of learning algorithms and the basics of common
    python libraries for these algorithms such as scikit-learn and pytorch.

    [Computer Science and Engineering]:     http://cse.nd.edu
    [University of Notre Dame]:             http://www.nd.edu

    </div>

    <img src="static/img/teaser.png" class="pull-right" style="margin-left: 10px; width: 40%"/>

    <div class="row" markdown="1">

    Upon successful completion of this course, students will be able to:

    1. **Evaluate** which model is appropriate for a given problem.

    2. **Utilize** modern python libraries for ML and AI.

    3. **Implement** basic ML and AI models.

    4. **Assess** AI/ML implementations for common issues and biases.

    </div>

    <div class="row">
        <div class="page-header">
            <h2 id="logistics"><i class="fa fa-cogs"></i> Logistics</h2>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="row">
                <div class="col-md-6">
                    <h3>Class Information</h3>

                    <dl>
                        <dt><i class="fa fa-clock-o"></i> Lecture</dt>
                        <dd><strong>M / W</strong> 3:30 PM - 4:45 PM</dd>

                        <dt><i class="fa fa-home"></i> Location</dt>
                        <dd>{{ page.external['semester_info']['class_location'] }}</dd>

                        <dt><i class="fa fa-slack"></i> Slack</dt>
                        <dd><a href="https://nd-cse.slack.com/messages/cse-30124-{{ term_code }}/">#cse-30124-{{ term_code }}</a></dd>

                        <dt><i class="fa fa-github"></i> GitHub</dt>
                        <dd><a href="https://www.github.com/nd-cse-30124-{{ term_code }}/">nd-cse-30124-{{ term_code }}</a></dd>
                    </dl>
                </div>

                <div class="col-md-6">
                    <h3>Instructor</h3>

                    <dl>
                        <dt><i class="fa fa-user"></i> Instructor</dt>
                        <dd><a href="http://www.williamtheisen.com">Bill Theisen</a> (<a href="mailto:wtheisen@nd.edu">wtheisen@nd.edu</a>)</dd>
                        <dd>Please use Dr./Professor Bill or <br>Dr./Professor Theisen</dd>

                        <dt><i class="fa fa-life-ring"></i> Office Hours</dt>
                        <dd><strong>Thursdays</strong> 1:00 PM - 5:00 PM, and by <strong>appointment</strong></dd>

                        <dt><i class="fa fa-briefcase"></i> Office Location</dt>
                        <dd>356B Fitz</dd>
                    </dl>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <h3>Teaching Assistants</h3>

            <div class="row">
                {% for index, (ta_id, ta_data) in enumerate(sorted(page.external['semester_info']['TAs'].items(), key=lambda x: x[1]['name'].split()[-1])) %}
                    <div class="col-md-4">
                        <dl>
                            <dt><i class="fa fa-user"></i> {{ ta_data['level'] }} Teaching Assistant</dt>
                            <dd>{{ ta_data['name'] }} (<a href="mailto:{{ ta_data['netid'] }}@nd.edu">{{ ta_data['netid'] }}@nd.edu</a>)</dd>
                            <!--
                            <dt><i class="fa fa-life-ring"></i> Office Hours</dt>
                            <dd>{{ ta_data.get('office_hours', 'TBD') }}</dd>
                            <dt><i class="fa fa-briefcase"></i> Office Location</dt>
                            <dd>{{ ta_data.get('oh_location', 'TBD') }}</dd>
                            //-->
                        </dl>
                    </div>
                    {% if (index + 1) % 3 == 0 %}
                        <div class="row"></div>
                    {% end %}
                {% end %}
            </div>
        </div>
    </div>

    <div class="row">
        <div class="page-header">
            <h2 id="office_hours"><i class="fa fa-clock"></i> Office Hours</h2>
        </div>
    </div>

    <div class="row">
        <table cellpadding="5" cellspacing="0" style="table-layout: fixed; width: 100%; border-collapse: collapse; border: 1px solid #ddd;">
        <tr>
            <th style="width: 150px;"></th>
            {% for day in ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"] %}
            <th style="width: calc((100% - 150px) / 7); text-align: center;">{{ day }}</th>
            {% end %}
        </tr>

        {% set processed_slots = {} %}
        {# Using consistent half-hour rows; no hour flags needed #}

        {# Build half-hour time slots from 10:00 AM to 9:00 PM #}
        {% set start_t = dateutil.parser.parse("10:00 AM") %}
        {% set end_t   = dateutil.parser.parse("9:00 PM") %}
        {% set time_slots = [] %}
        {% set total_half_hours = int(((end_t - start_t).seconds) / 1800) %}
        {% for i in range(total_half_hours) %}
            {% set s = start_t + dateutil.relativedelta.relativedelta(minutes=30*i) %}
            {% set e = s + dateutil.relativedelta.relativedelta(minutes=30) %}
            {% set _ = time_slots.append(s.strftime("%-I:%M %p") + " - " + e.strftime("%-I:%M %p")) %}
        {% end %}

        {% for time_slot in time_slots %}
            {% set slot_start_dt = dateutil.parser.parse(time_slot.split(' - ')[0]) %}
            {% set hour_start = slot_start_dt.replace(minute=0, second=0, microsecond=0) %}
            {% set hour_end   = hour_start + dateutil.relativedelta.relativedelta(hours=1) %}

            {% set row_top_border = 'border-top: 1px solid #ddd;' %}
            {% set half_hour_line = 'background-image: linear-gradient(to bottom, transparent calc(50% - 0.5px), #dddddd calc(50% - 0.5px), #dddddd calc(50% + 0.5px), transparent calc(50% + 0.5px)); background-size: 100% 100%; background-repeat: no-repeat;' %}
            <tr>
            {% if slot_start_dt.minute == 0 %}
                {% set hour_label = hour_start.strftime("%-I:00 %p") + " - " + hour_end.strftime("%-I:00 %p") %}
                {% set hour_has_content = False %}
                {% for day_chk in ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"] %}
                    {% if not hour_has_content %}
                        {# Check class times #}
                        {% set class_hours = page.external['semester_info']['class_times'].get(day_chk, '') %}
                        {% if class_hours %}
                            {% set c_start = dateutil.parser.parse(class_hours.split(' - ')[0]) %}
                            {% set c_end   = dateutil.parser.parse(class_hours.split(' - ')[1]) %}
                            {% if (c_start < hour_end and c_end > hour_start) %}
                                {% set hour_has_content = True %}
                            {% end %}
                        {% end %}

                        {# Check instructor hours #}
                        {% if not hour_has_content %}
                            {% set instr_oh = page.external['semester_info']['Instructor']['office_hours'].get(day_chk, '') %}
                            {% if instr_oh %}
                                {% set instr_time = instr_oh.split('|')[0] %}
                                {% set i_start = dateutil.parser.parse(instr_time.split(' - ')[0]) %}
                                {% set i_end   = dateutil.parser.parse(instr_time.split(' - ')[1]) %}
                                {% if (i_start < hour_end and i_end > hour_start) %}
                                    {% set hour_has_content = True %}
                                {% end %}
                            {% end %}
                        {% end %}

                        {# Check TA hours #}
                        {% if not hour_has_content %}
                            {% for _tid, _ta in page.external['semester_info']['TAs'].items() %}
                                {% if 'office_hours' in _ta and day_chk in _ta['office_hours'] %}
                                    {% set oh_time = _ta['office_hours'][day_chk].split('|')[0] %}
                                    {% set t_start = dateutil.parser.parse(oh_time.split(' - ')[0]) %}
                                    {% set t_end   = dateutil.parser.parse(oh_time.split(' - ')[1]) %}
                                    {% if (t_start < hour_end and t_end > hour_start) %}
                                        {% set hour_has_content = True %}
                                        {% break %}
                                    {% end %}
                                {% end %}
                            {% end %}
                        {% end %}
                    {% end %}
                {% end %}
                <td rowspan="2" style="text-align: left; padding: 8px; {{ row_top_border }}">{{ hour_label }}</td>
            {% else %}
                {# This row shares the time label cell above #}
            {% end %}
            {% for day in ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"] %}
                {% if not processed_slots.get(f"{day}_{time_slot}") %}
                    {% set cell_content = [] %}
                    {% set cell_rowspans = [] %}
                    {% set cell_rowspan = 1 %}
                    {% set cell_bg_color = "" %}
                    {% set cell_type = "" %}

                                        <!-- Check for class times -->
                    {% set class_hours = page.external['semester_info']['class_times'].get(day, '') %}
                    {% if class_hours %}
                        {% set start_time = class_hours.split(' - ')[0] %}
                        {% set end_time = class_hours.split(' - ')[1] %}
                        {% set start_slot = dateutil.parser.parse(start_time) %}
                        {% set end_slot = dateutil.parser.parse(end_time) %}
                        {% set time_slot_start = dateutil.parser.parse(time_slot.split(' - ')[0]) %}
                        {% set time_slot_end = dateutil.parser.parse(time_slot.split(' - ')[1]) %}
                        
                        <!-- Check if this time slot overlaps with the class time -->
                        {% if (start_slot < time_slot_end and end_slot > time_slot_start) %}
                            {% set lecture_rowspan = int(((end_slot - time_slot_start).seconds + 1799) / 1800) %}
                            {% set _ = cell_rowspans.append(lecture_rowspan) %}
                            {% set _ = cell_content.append({
                                'name': 'Lecture',
                                'time': class_hours,
                                'loc' : page.external['semester_info']['class_location'],
                                'type': 'lecture'
                            }) %}
                            {% set cell_type = cell_type if cell_type != "" else "lecture" %}
                        {% end %}
                    {% end %}

                    <!-- Check for instructor office hours -->
                    {% set instructor_hours = page.external['semester_info']['Instructor']['office_hours'].get(day, '') %}
                    {% if instructor_hours %}
                        {% set instructor_hours_time = instructor_hours.split('|')[0] %}
                        {% set instructor_loc = instructor_hours.split('|')[1] %}
                        {% set start_time = instructor_hours_time.split(' - ')[0] %}
                        {% set end_time = instructor_hours_time.split(' - ')[1] %}
                        {% set start_slot = dateutil.parser.parse(start_time) %}
                        {% set end_slot = dateutil.parser.parse(end_time) %}
                        {% set time_slot_start = dateutil.parser.parse(time_slot.split(' - ')[0]) %}
                        {% set time_slot_end = dateutil.parser.parse(time_slot.split(' - ')[1]) %}

                        <!-- Check if this time slot overlaps with the instructor's office hours -->
                        {% if (start_slot < time_slot_end and end_slot > time_slot_start) %}
                            {% set instructor_rowspan = int(((end_slot - time_slot_start).seconds + 1799) / 1800) %}
                            {% set _ = cell_rowspans.append(instructor_rowspan) %}
                            {% set _ = cell_content.append({
                                'name': page.external['semester_info']['Instructor']['name'],
                                'time': instructor_hours_time,
                                'loc' : instructor_loc,
                                'type': 'instructor'
                            }) %}
                            {% set cell_type = cell_type if cell_type != "" else "instructor" %}
                        {% end %}
                    {% end %}

                    <!-- Check for TA office hours -->
                    {% for ta_id, ta in page.external['semester_info']['TAs'].items() %}
                        {% if 'office_hours' in ta and day in ta['office_hours'] %}
                            {% set ta_hours = ta['office_hours'][day].split('|')[0] %}
                            {% set ta_loc = ta['office_hours'][day].split('|')[1] %}
                            {% set start_time = ta_hours.split(' - ')[0] %}
                            {% set end_time = ta_hours.split(' - ')[1] %}
                            {% set start_slot = dateutil.parser.parse(start_time) %}
                            {% set end_slot = dateutil.parser.parse(end_time) %}
                            {% set time_slot_start = dateutil.parser.parse(time_slot.split(' - ')[0]) %}
                            {% set time_slot_end = dateutil.parser.parse(time_slot.split(' - ')[1]) %}

                            <!-- Check if this time slot overlaps with the TA's office hours -->
                            {% if (start_slot < time_slot_end and end_slot > time_slot_start) %}
                                {% set ta_rowspan = int(((end_slot - time_slot_start).seconds + 1799) / 1800) %}
                                {% set _ = cell_rowspans.append(ta_rowspan) %}
                                {% set _ = cell_content.append({
                                    'name': ta['name'],
                                    'time': ta_hours,
                                    'loc' : ta_loc,
                                    'type': 'ta',
                                    'ta_id': ta_id
                                }) %}
                                {% set cell_type = cell_type if cell_type != "" else "ta" %}
                                {% if cell_type == "ta" and not cell_bg_color %}
                                    {% set cell_bg_color = ta_colors.get(ta_id, "rgba(240,240,240,0.5)") %}
                                {% end %}
                            {% end %}
                        {% end %}
                    {% end %}

                    <!-- Decide on rowspan: combine multiple overlapping entries across common duration -->
                    {% if cell_content %}
                        {% if len(cell_content) == 1 %}
                            {% set cell_rowspan = max(cell_rowspans[0], 1) %}
                            {% if cell_type == "lecture" or cell_type == "instructor" %}
                                {% set cell_bg_color = "rgba(204, 229, 255, 0.5)" %}
                            {% elif cell_type == "ta" and not cell_bg_color %}
                                {% set cell_bg_color = "rgba(240,240,240,0.5)" %}
                            {% end %}
                        {% else %}
                            {% set common_span = min(cell_rowspans) if cell_rowspans else 1 %}
                            {% set cell_rowspan = max(common_span, 1) %}
                            {% set cell_bg_color = "rgba(245, 245, 245, 0.7)" %}
                        {% end %}

                        {# Compute background style: split colors for overlapping TAs #}
                        {% set cell_bg_style = '' %}
                        {% set all_ta = True %}
                        {% for it in cell_content %}
                            {% if it.get('type') != 'ta' %}
                                {% set all_ta = False %}
                            {% end %}
                        {% end %}
                        {% set ta_ids = [] %}
                        {% for it in cell_content %}
                            {% if it.get('type') == 'ta' and it.get('ta_id') and it.get('ta_id') not in ta_ids %}
                                {% set _ = ta_ids.append(it.get('ta_id')) %}
                            {% end %}
                        {% end %}
                        {% if all_ta and len(ta_ids) >= 2 %}
                            {% if len(ta_ids) == 2 %}
                                {% set c1 = ta_colors.get(ta_ids[0], 'rgba(240,240,240,0.5)') %}
                                {% set c2 = ta_colors.get(ta_ids[1], 'rgba(240,240,240,0.5)') %}
                                {% set cell_bg_style = 'background-image: linear-gradient(90deg, ' + c1 + ' 0% 50%, ' + c2 + ' 50% 100%);' %}
                            {% else %}
                                {% set parts = [] %}
                                {% for i, tid in enumerate(ta_ids) %}
                                    {% set start = int((100 * i) / len(ta_ids)) %}
                                    {% set end = 100 if (i + 1) == len(ta_ids) else int((100 * (i + 1)) / len(ta_ids)) %}
                                    {% set color = ta_colors.get(tid, 'rgba(240,240,240,0.5)') %}
                                    {% set _ = parts.append(color + ' ' + str(start) + '% ' + str(end) + '%') %}
                                {% end %}
                                {% set cell_bg_style = 'background-image: linear-gradient(90deg, ' + ', '.join(parts) + ');' %}
                            {% end %}
                        {% elif all_ta and len(ta_ids) == 1 %}
                            {% set cell_bg_style = 'background-color: ' + ta_colors.get(ta_ids[0], 'rgba(240,240,240,0.5)') + ';' %}
                        {% else %}
                            {# Non-TA or mixed content: keep neutral or lecture/instructor styling #}
                            {% if len(cell_content) == 1 and cell_content[0].get('type') in ['lecture', 'instructor'] %}
                                {% set cell_bg_style = 'background-color: rgba(204, 229, 255, 0.5);' %}
                            {% elif len(cell_content) > 1 %}
                                {% set cell_bg_style = 'background-color: rgba(245, 245, 245, 0.7);' %}
                            {% end %}
                        {% end %}

                        <!-- Mark affected time slots as processed only when using rowspan -->
                        {% if cell_rowspan > 1 %}
                            {% for i in range(cell_rowspan) %}
                                {% set half_offset = dateutil.relativedelta.relativedelta(minutes=30*i) %}
                                {% set curr_slot = (dateutil.parser.parse(time_slot.split(' - ')[0]) + half_offset).strftime("%-I:%M %p") %}
                                {% set next_slot = (dateutil.parser.parse(time_slot.split(' - ')[0]) + half_offset + dateutil.relativedelta.relativedelta(minutes=30)).strftime("%-I:%M %p") %}
                                {% set _ = processed_slots.update({f"{day}_{curr_slot} - {next_slot}": True}) %}
                            {% end %}
                        {% else %}
                            {% set _ = processed_slots.update({f"{day}_{time_slot}": True}) %}
                        {% end %}

                        <!-- Display the cell -->
                        <td rowspan="{{ cell_rowspan }}" style="text-align: center; vertical-align: middle; padding: 6px; {{ cell_bg_style }} border: 1px solid #ddd; {{ row_top_border }}">
                            {% for i, item in enumerate(cell_content) %}
                                {% if i > 0 %}<hr style="margin: 4px 0; border-color: rgba(0,0,0,0.2);">{% end %}
                                <div><strong>{{ item['name'] }}</strong></div>
                                <div><small>{{ item['time'] }}</small></div>
                                <div><small>{{ item['loc'] }}</small></div>
                            {% end %}
                        </td>
                    {% else %}
                        {% if slot_start_dt.minute == 0 %}
                            {# Decide whether to split this hour for this specific day (bottom half has content without top half) #}
                            {% set half1_start = slot_start_dt %}
                            {% set half1_end   = slot_start_dt + dateutil.relativedelta.relativedelta(minutes=30) %}
                            {% set half2_start = half1_end %}
                            {% set half2_end   = slot_start_dt + dateutil.relativedelta.relativedelta(minutes=60) %}

                            {% set needs_split = False %}

                            {# Class times for this day #}
                            {% set class_hours = page.external['semester_info']['class_times'].get(day, '') %}
                            {% if class_hours %}
                                {% set c_start = dateutil.parser.parse(class_hours.split(' - ')[0]) %}
                                {% set c_end   = dateutil.parser.parse(class_hours.split(' - ')[1]) %}
                                {% set overlap_top = (c_start < half1_end and c_end > half1_start) %}
                                {% set overlap_bottom = (c_start < half2_end and c_end > half2_start) %}
                                {% if (overlap_bottom and not overlap_top) %}
                                    {% set needs_split = True %}
                                {% end %}
                            {% end %}

                            {# Instructor OH for this day #}
                            {% set instr_oh = page.external['semester_info']['Instructor']['office_hours'].get(day, '') %}
                            {% if instr_oh %}
                                {% set instr_time = instr_oh.split('|')[0] %}
                                {% set i_start = dateutil.parser.parse(instr_time.split(' - ')[0]) %}
                                {% set i_end   = dateutil.parser.parse(instr_time.split(' - ')[1]) %}
                                {% set overlap_top = (i_start < half1_end and i_end > half1_start) %}
                                {% set overlap_bottom = (i_start < half2_end and i_end > half2_start) %}
                                {% if (overlap_bottom and not overlap_top) %}
                                    {% set needs_split = True %}
                                {% end %}
                            {% end %}

                            {# TA OH for this day #}
                            {% for _tid, _ta in page.external['semester_info']['TAs'].items() %}
                                {% if 'office_hours' in _ta and day in _ta['office_hours'] %}
                                    {% set oh_time = _ta['office_hours'][day].split('|')[0] %}
                                    {% set t_start = dateutil.parser.parse(oh_time.split(' - ')[0]) %}
                                    {% set t_end   = dateutil.parser.parse(oh_time.split(' - ')[1]) %}
                                    {% set overlap_top = (t_start < half1_end and t_end > half1_start) %}
                                    {% set overlap_bottom = (t_start < half2_end and t_end > half2_start) %}
                                    {% if (overlap_bottom and not overlap_top) %}
                                        {% set needs_split = True %}
                                    {% end %}
                                {% end %}
                            {% end %}

                            {% if needs_split %}
                                {# Only top empty cell; leave bottom half for content #}
                                <td style="padding: 8px; border: 1px solid #ddd; {{ row_top_border }}"></td>
                                {% set _ = processed_slots.update({f"{day}_{time_slot}": True}) %}
                            {% else %}
                                {# Default: span the hour by combining two half-hour rows (no midline when truly empty) #}
                                <td rowspan="2" style="padding: 8px; border: 1px solid #ddd; {{ row_top_border }}"></td>
                                {% set next_slot = (slot_start_dt + dateutil.relativedelta.relativedelta(minutes=30)).strftime("%-I:%M %p") %}
                                {% set _ = processed_slots.update({f"{day}_{time_slot}": True}) %}
                                {% set _ = processed_slots.update({f"{day}_{next_slot} - {(slot_start_dt + dateutil.relativedelta.relativedelta(minutes=60)).strftime('%-I:%M %p')}": True}) %}
                            {% end %}
                        {% else %}
                            {# Second half-hour empty cell when needed #}
                            <td style="padding: 8px; border: 1px solid #ddd; {{ row_top_border }}"></td>
                        {% end %}
                    {% end %}
                {% end %}
            {% end %}
            </tr>
        {% end %}
        </table>
    </div>

    <div class="row">
        <div class="page-header">
            <h2 id="schedule"><i class="fa fa-calendar"></i> Schedule</h2>
            <p>Click on the
                <i class="fa-solid fa-circle-info"></i>
                <i class="fa-solid fa-caret-right"></i>
                next to a topic for additional resources.

                <i class="fa-solid fa-star" style="color: #f0ad4e;"></i>
                indicates the required resource for the topic.
            </p>
        </div>
    </div>

    <style>
        table.schedule td.unit {
            background-color: #fff;
            border-right: 2px solid #ddd;
            text-align: right;
            width: 175px;
            vertical-align: middle;
        }

        table.schedule tbody tr.topic-row:nth-of-type(even) {
            background-color: #f9f9f9;
        }

        table.schedule tbody tr.topic-row:nth-of-type(odd) {
            background-color: #ffffff;
        }

        table.schedule tbody tr.resource-row {
            background-color: #ffffff !important;
        }

        tr.resource-row ul {
            list-style-position: inside;
            padding-left: 0;
            margin-left: 0;
        }

        tr.resource-row li {
            padding-left: 0;
            margin-left: 0;
        }
    </style>

    <div class="row">
        <table class="table condensed schedule">
            <thead>
                <tr>
                    <th class="text-center">Unit</th>
                    <th class="text-center" style="width: 100px;">Date</th>
                    <th class="text-center">Topics</th>
                    <th class="text-center">Assignments</th>
                </tr>
            </thead>
            <tbody>
                {% for theme in page.external['schedule'] %}
                    {% if not theme.get('days') %}
                        <tr class="topic-row">
                        <td colspan="4" class="text-center text-strong" style="border-top: 2px solid #ddd; border-bottom: 2px solid #ddd; padding: 4px;">{{ theme['name'] }}</td>
                        </tr>
                        {% continue %}
                    {% end %}

                    {% for index, day in enumerate(theme['days']) %}

                        <tr class="topic-row">
                            {% if index == 0 %}
                                {% set unit_id = theme['name'].replace(' ', '_') %}

                                <td id="unit-cell-{{ unit_id }}" rowspan="{{ len(theme['days']) }}" class="text-strong text-primary text-center unit">{{ theme['name'] }}</td>
                            {% end %}

                            <td class="text-center text-strong"><tt>{{ day['date'] }}</tt></td>
                            <td class="text-strong">
                            {% set lecture_id = lecture_id_for(day.get('topics', '')) or (unit_id + '-' + day['date'].replace(' ', '_').replace('/', '-')) %}
                            {% set day_resources = page.external.get('resources', {}).get(lecture_id, []) %}

                            {% if 'topics' in day %}
                                {% if day['topics'] == 'Office Hours' or day['topics'].startswith('Cancelled') %}
                                    <i class="text-muted">{{ day.get('topics', '') }}</i>
                                {% elif 'exam' in day['topics'].lower() %}
                                    <i class="text-danger">{{ day.get('topics', '') }}</i>
                                {% else %}
                                    <span onclick="toggleResources('{{ lecture_id }}','{{ unit_id }}')" style="cursor: pointer;">
                                        {{ day.get('topics', '') }}
                                        {% if day_resources %}
                                            <i class="fa-solid fa-circle-info"></i>
                                            <i class="fa-solid fa-caret-right caret-icon" id="{{ lecture_id }}"></i>
                                        {% end %}
                                    </span>
                                {% end %}
                            {% else %}
                                <i class="text-muted">Intro to AI</i>
                            {% end %}

                            {% for item in day.get('items', []) %}
                                {% if 'exam' in item['name'].lower() %}
                                    {% set item['label'] = 'danger' %}
                                {% elif item['name'].lower().startswith('panopto') %}
                                    {% set item['label'] = 'success' %}
                                {% elif item['name'].lower().startswith('blogpost') %}
                                    {% set item['label'] = 'primary' %}
                                {% else %}
                                    {% set item['label'] = 'default' %}
                                {% end %}

                                {% if 'link' in item %}
                                    <a class="label label-{{ item['label'] }}" href="{{ item['link'] }}">{{ item['name'] }}</a>
                                {% else %}
                                    <span class="label label-{{ item['label'] }}">{{ item['name'] }}</span>
                                {% end %}
                            {% end %}

                            </td>
                            <td class="text-strong text-center">

                            {% for assignment in day.get('assignments', []) %}
                                {% set assignment_id = '_'.join(assignment.lower().split()) %}

                                {% if 'solutions' in assignment_id %}
                                    {% set assignment_label = 'success' %}
                                    <a href="static/pdf/{{ assignment_id }}.pdf" class="label label-{{ assignment_label }}">{{ assignment }}</a>
                                {% elif assignment_id.startswith('reading') %}
                                    {% set assignment_label = 'primary' %}
                                    <a href="{{ assignment_id }}.html" class="label label-{{ assignment_label }}">{{ assignment }}</a>
                                {% elif 'practice' in assignment_id %}
                                    {% set assignment_label = 'success' %}
                                    <a href="static/pdf/{{ assignment_id }}.pdf" class="label label-{{ assignment_label }}">{{ assignment }}</a>
                                {% elif 'exam' in assignment_id %}
                                    {% set assignment_label = 'danger' %}
                                    <a href="static/pdf/{{ assignment_id }}.pdf" class="label label-{{ assignment_label }}">{{ assignment }}</a>
                                {% elif 'primer' in assignment_id %}
                                    {% set assignment_label = 'success' %}
                                    <a href="{{ assignment_id }}.html" class="label label-{{ assignment_label }}">{{ assignment }}</a>
                                {% else %}
                                    {% set assignment_label = 'caution' %}
                                    <a href="{{ assignment_id }}.html" class="label label-{{ assignment_label }}">{{ assignment }}</a>
                                {% end %}
                            {% end %}
                            </td>
                        </tr>
                        {% if day_resources %}
                            <tr id="resources-{{ lecture_id }}" class="resource-row" style="display: none;">
                                <td colspan="3">
                                    {% set resources = day_resources %}
                                    {% include "resource_sections.tmpl" %}
                                </td>
                            </tr>
                        {% end %}
                    {% end %}
                {% end %}
            </tbody>
        </table>
        <br>
    </div>

    <div class="row">
        <div class="col-md-10 col-md-offset-1">
            <div class="alert alert-success" markdown="1">
                <p>There's loads of additional resources out there! If you find one that particuarly resonates with you, I'd appreciate it if you were willing to share it with the rest of the class. You'll even have the option to tag it with your name so future students can see who to thank!</p>
                <br>
                <p>Submit any additional resources to this google form: <a href="https://forms.gle/3kM8oDGj6BoKCPRp8">Additional Resources</a></p>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="page-header">
            <h2 id="Requirements"><i class="fa fa-balance-scale"></i> Requirements</h2>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
        <h3>Coursework</h3>
        <table class="table table-condensed table-bordered table-striped">
            <thead>
                <tr>
                    <th class="text-center">Component</th>
                    <th class="text-center">Points</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><span class="label label-primary">Reading</span> Readings</td>
                    <td class="text-center">15 &times; 2</td>
                </tr>
                <tr>
                    <td><span class="label label-caution">Homework</span> Group Homework Assignments</td>
                    <td class="text-center">5 &times; 20</td>
                </tr>
                <tr>
                    <td><span class="label label-danger">Midterm</span> Midterm Exams (5 points for turning in exam practice packet)</td>
                    <td class="text-center">2 &times; 50</td>
                </tr>
                <tr>
                    <td><span class="label label-danger">Exam</span> Final Exam (5 points for turning in exam practice packet)</td>
                    <td class="text-center">1 &times; 70</td>
                </tr>
                <tr>
                    <td class="text-strong text-right">Total</td>
                    <td class="text-strong text-center">300</td>
                </tr>
            </tbody>
        </table>
        </div>
        <div class="col-md-6">
        <h3>Grading</h3>
        <table class="table table-condensed table-bordered">
            <thead>
                <tr>
                    <th class="text-center">Grade</th>
                    <th class="text-center">Points</th>
                    <th class="text-center">Grade</th>
                    <th class="text-center">Points</th>
                    <th class="text-center">Grade</th>
                    <th class="text-center">Points</th>
                </tr>
            </thead>
            <tbody>
                <tr class="success">
                    <td></td>
                    <td></td>
                    <td class="text-center text-strong">A</td>
                    <td class="text-center">279-300</td>
                    <td class="text-center text-strong">A-</td>
                    <td class="text-center">270-278</td>
                </tr>
                <tr class="info">
                    <td class="text-center text-strong">B+</td>
                    <td class="text-center">260-269</td>
                    <td class="text-center text-strong">B</td>
                    <td class="text-center">250-259</td>
                    <td class="text-center text-strong">B-</td>
                    <td class="text-center">240-249</td>
                </tr>
                <tr class="warning">
                    <td class="text-center text-strong">C+</td>
                    <td class="text-center">230-239</td>
                    <td class="text-center text-strong">C</td>
                    <td class="text-center">220-229</td>
                    <td class="text-center text-strong">C-</td>
                    <td class="text-center">210-219</td>
                </tr>
                <tr class="danger">
                    <td class="text-center text-strong">D</td>
                    <td class="text-center">195-209</td>
                    <td class="text-center text-strong">F</td>
                    <td class="text-center">0-194</td>
                    <td></td>
                    <td></td>
                </tr>
            </tbody>
        </table>
        </div>
    </div>

    <div class="row">
        <div class="col-md-10 col-md-offset-1">
            <div class="alert alert-info">
                <h4><i class="fa fa-calendar"></i> Due Dates</h4>
                <p>
                <ul>
                <li><p><b>Readings</b> are due at <b>3:00PM</b> on the <b>day</b> of the due date.</p></li>
                <li><p><b>Homeworks</b> are due at <b>midnight</b> on the <b>Monday</b> of the due week.</p></li>
                </ul>
                </p>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-10 col-md-offset-1">
            <div class="alert alert-danger">
                <h4><i class="fa fa-calendar"></i> Practice Packets and Exams</h4>
                <p>
                I do something a little different in this class than I've seen in other ones. Instead of giving you old versions of the exams with which to practice, I will release a "practice packet". If you turn in this practice packet on the day of the exam (either online or paper is fine) then you will receive points on the exam itself for actually studying. The practice packet is graded entirely on completion. There will be an entry in canvas worth 0 points for each practice packet, the points you receive for doing it will be reflected in the exam score itself.
                </p>
            </div>
        </div>
    </div>

    <div class="row">
      <div class="col-md-12">
          <h3>Policies</h3>
          <div class="row">
              <div class="col-md-4">
              <h4>Participation</h4>
              <p>
              Students are expected to attend and contribute regularly in class. This
              means answering questions in class, participating in discussions, and
              helping other students.
              </p>
              <p>
              Foreseeable absences should be discussed with the instructor ahead of time.
              </p>
              </div>
               <div class="col-md-4">
              <h4>Community</h4>
              <p>
              Recalling one of the tenets of the <a href="https://en.wikipedia.org/wiki/Hacker_ethic">Hacker Ethic</a>:
              </p>
              <blockquote>
              Hackers should be judged by their hacking, not criteria such as
              degrees, age, race, sex, or position.
              </blockquote>
              <p>
              Students are expected to be respectful of their fellow classmates
              and the instructional staff.
              </p>
              </div>
              <div class="col-md-4">
              <h4>Students with Disabilities</h4>
              <p>
              Any student who has a documented disability and is registered with
              Disability Services should speak with the professor as soon as possible
              regarding accommodations. Students who are not registered should contact
              the <a href="https://sarabeadisabilityservices.nd.edu/">Office of Disabilities</a>.
              </p>
              </div>
          </div>
          <div class="row">
              <div class="col-md-4">
              <h4>Academic Honesty</h4>
              <p>
              Any academic misconduct in this course is considered a serious
              offense, and the strongest possible academic penalties will be
              pursued for such behavior. Students may discuss high-level
              ideas with other students, but at the time of implementation
              (i.e. programming), each person must do his/her own work. Use
              of the Internet as a reference is allowed but directly copying
              code or other information is cheating. It is cheating to copy,
              to allow another person to copy, all or part of an exam or a
              assignment, or to fake program output. It is also a violation
              of the <a href="https://honorcode.nd.edu/">Undergraduate
              Academic Code of Honor</a> to observe and then fail to report
              academic dishonesty. You are responsible for the security and
              integrity of your own work.
              </p>
              </div>
              <div class="col-md-4">
              <h4>Late Work</h4>
              <p>
              In the case of a serious illness or other excused absence, as defined by
              university policies, coursework submissions will be accepted late by the
              same number of days as the excused absence.
              </p>
              <p>
              Otherwise, there is an automatic <b>25% late penalty</b> for
              assignments turned in <b>12 hours</b> pass the specified
              deadline.
              </p>
              </div>
              <div class="col-md-4">
              <h4>Classroom Recording</h4>
              <p>
              This course will be recorded using Zoom and Panopto. This system allows us
              to automatically record and distribute lectures to you in a
              secure environment. You can watch these recordings on your
              computer, tablet, or smartphone. In the course in Sakai, look for
              the "Panopto" tool on the left hand side of the course.
              </p>
              <p>
              Because we will be recording in the classroom, your questions and
              comments may be recorded. Recordings typically only capture the
              front of the classroom, but if you have any concerns about your
              voice or image being recorded please speak to me to discuss your
              concerns. Except for faculty and staff who require access, no
              content will be shared with individuals outside of your course
              without your permission.
              </p>
              <p>
              These recordings are jointly copyrighted by the University of
              Notre Dame and your instructor. Posting them to other websites
              (including YouTube, Facebook, SnapChat, etc.) or elsewhere
              without express, written permission may result in disciplinary
              action and possible civil prosecution.
              </p>
              </div>
          </div>
      </div>
    </div>

    <div class="row">
        <div class="col-md-10 col-md-offset-1">
            <div class="alert alert-danger">
            <h4><i class="fa fa-warning"></i> CSE Guide to the Honor Code</h4>

            <p>For the assignments in this class, you are allowed to consult
            printed and online resources and to discuss the class material with
            other students.  You may also consult <b>AI Tools</b> such as
            <b>CoPilot</b> or <b>ChatGPT</b> for help explaining concepts,
            debugging problems, or as a reference.  Viewing or consulting
            <b>solutions</b>, such as those from other students, previous
            semesters, or generated by <b>AI Tools</b> is <b>never
            allowed</b>.</p>

            <p>Likewise, you may copy <b>small and trivial</b> snippets from
            books, online sources, and <b>AI Tools</b> as long as you <b>cite
            them properly</b>.  However, you <b>may not copy</b> solutions or
            <b>significant</b> portions of code from other students or online
            sources, nor may you generate solutions via <b>AI Tools</b>.

            <p>Finally, when preparing for exams in this class, <b>you may not
            access exams from previous semesters</b>, nor may you look at or
            copy solutions from other current or former students.</p>

            <p></p>

            <table class="table table-striped table-bordered" style="color: #000000; background: #ffffff; font-weight: bold">
            <thead>
            <th></th>
            <th class="text-center">Resources</th>
            <th class="text-center">Solutions</th>
            </thead>
            <tbody>
            <tr>
            <th>Consulting</th>
            <td bgcolor="#93c47d">Allowed</td>
            <td bgcolor="#e06666">Not Allowed</td>
            </tr>
            <tr>
            <th>Copying</th>
            <td bgcolor="ffd966">Cite</td>
            <td bgcolor="#e06666">Not Allowed</td>
            </tr>
            </tbody></table>

            <p>See the <a
            href="https://cse.nd.edu/undergraduate/cse-guide-to-the-honor-code/">CSE
            Guide to the Honor Code</a> for definitions of the above terms and
            specific examples of what is allowed and not allowed when
            consulting resources.</p>

            <p>If you are unclear about whether certain forms of consultation
            or common work are acceptable or what the standards for citation
            are, you responsible for consulting your instructor.</p>

            <p>If an instructor sees behavior that is, in his judgement,
            academically dishonest, he is required to file either an <a
            href="https://honorcode.nd.edu/honor-code-violation-report/">Honor
            Code Violation Report</a> or a formal report to the College of
            Engineering Honesty Committee.</p>

            </div>
        </div>
    </div>

    <div class="row">
        <div class="page-header">
            <h2 id="resources"><i class="fa fa-external-link"></i> Resources</h2>
        </div>
    </div>

    <div class="row">
        <div class="col-md-10 col-md-offset-1">
            <div class="alert alert-success" markdown="1">
                <p>Submit any questions or suggestions to this anonymous google form: <a href="https://forms.gle/yrK4mndNDPsSmyD16">Questions and Suggestions</a></p>
                <br>
                <p><b>Note:</b> This form is genuinely anonymous but anonymity is a priviledge. Please don't misuse it.</p>
            </div>

            <div class="alert alert-warning" markdown="1">
                <p>If you're interested in being a TA please apply via this google form: <a href="https://docs.google.com/forms/d/e/1FAIpQLScFuwaSylcUzV1HgVMVzfVd_xMlpHu9w_x4cJtEKoJVl1d7nA/viewform?usp=sharing">TA Applications</a></p>
                <br>
                <p><b>Note:</b> Applications are due by the day of the second exam and will be evaluated shortly after.</p>
                <p><b>Note:</b> TAing for CSE 30124 is quite competitive and usually there are only 1 or 2 open slots a semester (if any), so it may be worth having a backup plan.</p>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-10 col-md-offset-1">

            One of the benefits of ML/AI being extremely popular is there are many online resources
            available for learning it. The best teachers of the topics release much of their material
            avaible for free online. If something in class seemed unclear, you're encouraged
            to seek out an explanation that makes the most sense to you! If you find one that you really
            like, please share it with the rest of the class. Below are links to books, blogposts, and lectures
            that I personally find very useful.

            <div class="row">
                <div class="col-md-6">
                    <h3 onclick="toggleResourceSection('readings')">
                        <i class="fa-solid fa-book"></i>
                        Readings
                        <i class="fa-solid fa-circle-info"></i>
                        <i class="fa-solid fa-caret-right" id="readings-icon"></i>
                    </h3>
                    <div id="readings" style="display: none;">
                        <ul>
                            <li><a href="https://artint.info/3e/html/ArtInt3e.html">Artificial Intelligence: Foundations of Computational Agents (FCA)</a></li>
                            <li><a href="https://probml.github.io/pml-book/book1.html">Probabilistic Machine Learning: An Introduction (PML)</a></li>
                            <li><a href="https://d2l.ai/index.html">Dive into Deep Learning (D2L)</a></li>
                            <li><a href="https://www.statlearning.com/">An Introduction to Statistical Learning (ISLP)</a></li>
                            <li><a href="https://www.cs.huji.ac.il/~shais/UnderstandingMachineLearning/copy.html">Understanding Machine Learning: From Theory to Algorithms (UML)</a></li>
                        </ul>
                    </div>
                </div>

                <div class="col-md-6">
                    <h3 onclick="toggleResourceSection('ai-ml-courses')">
                        <i class="fa-solid fa-video-camera"></i>
                        AI/ML Course Videos
                        <i class="fa-solid fa-circle-info"></i>
                        <i class="fa-solid fa-caret-right" id="ai-ml-courses-icon"></i>
                    </h3>
                    <div id="ai-ml-courses" style="display: none;">
                        <ul>
                            <li><a href="https://cs50.harvard.edu/ai/2024/">Harvard's CS50's Introduction to Artificial Intelligence with Python</a></li>
                            <li><a href="https://ocw.mit.edu/courses/6-034-artificial-intelligence-fall-2010/">MIT's 6.034 Artificial Intelligence taught by Patrick Winston</a></li>
                            <li><a href="https://www.youtube.com/watch?v=ZiwogMtbjr4&list=PLoROMvodv4rOca_Ovz1DvdtWuz8BfSWL2">Stanford's CS221: Artificial Intelligence: Principles and Techniques</a></li>
                            <li><a href="https://www.youtube.com/playlist?list=PLl8OlHZGYOQ7bkVbuRthEsaLr7bONzbXS">Cornell's CS4780: Machine Learning for Decision Making</a></li>
                        </ul>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <h3 onclick="toggleResourceSection('other-books')">
                        <i class="fa-solid fa-book"></i>
                        Other Books
                        <i class="fa-solid fa-circle-info"></i>
                        <i class="fa-solid fa-caret-right" id="other-books-icon"></i>
                    </h3>
                    <div id="other-books" style="display: none;">
                        <ul>
                            <li><a href="https://ai.stanford.edu/~nilsson/QAI/qai.pdf">The Quest for Artificial Intelligence</a></li>
                            <li><a href="https://github.com/rasbt/machine-learning-book">Machine Learning with PyTorch and Scikit-Learn</a></li>
                            <li><a href="https://www.nltk.org/book/">Natural Language Processing with Python (NLTK)</a></li>
                        </ul>
                    </div>
                </div>

                <div class="col-md-6">
                    <h3 onclick="toggleResourceSection('background-courses')">
                        <i class="fa-solid fa-video-camera"></i>
                        "Background" Course Videos
                        <i class="fa-solid fa-circle-info"></i>
                        <i class="fa-solid fa-caret-right" id="background-courses-icon"></i>
                    </h3>
                    <div id="background-courses" style="display: none;">
                        <ul>
                            <li><a href="https://www.youtube.com/watch?v=7UJ4CFRGd-U&list=PL221E2BBF13BECF6C&index=2">MIT's 18.06 Linear Algebra taught by THE Gilbert Strang</a></li>
                            <li><a href="https://www.youtube.com/playlist?list=PLHXZ9OQGMqxfUl0tcqPNTJsb7R6BqSLo6">Linear Algebra</a></li>
                            <li><a href="https://www.youtube.com/playlist?list=PLhcN-s3_Z7-YS6ltpJhjwqvHO1TYDbiZv">Matrix Calculus</a></li>
                            <li><a href="https://www.youtube.com/playlist?list=PLBh2i93oe2qswFOC98oSFc37-0f4S3D4z">Probability Theory</a></li>
                            <li><a href="https://www.youtube.com/watch?v=jdoLvrfkG3Y">Introduction to Probability</a></li>
                            <li><a href="https://www.youtube.com/watch?v=sQqniayndb4&list=PLMrJAkhIeNNR3sNYvfgiKgcStwuPSts9V">Probability Bootcamp</a></li>
                        </ul>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <h3 onclick="toggleResourceSection('supplemental-courses')">
                        <i class="fa-solid fa-video-camera"></i>
                        Supplemental Course Videos
                        <i class="fa-solid fa-circle-info"></i>
                        <i class="fa-solid fa-caret-right" id="supplemental-courses-icon"></i>
                    </h3>
                    <div id="supplemental-courses" style="display: none;">
                        <ul>
                            <li><a href="https://www.youtube.com/playlist?list=PL_iWQOsE6TfVYGEGiAOMaOzzv41Jfm_Ps">Berkley's CS 285: Deep Reinforcement Learning</a></li>
                            <li><a href="https://www.youtube.com/playlist?list=PLMrJAkhIeNNQz4BMoGSsN8cbt8pHlokhV">University of Washington's: Data Science for Biologists</a></li>
                            <li><a href="https://www.youtube.com/playlist?list=PL5XwKDZZlwaY7t0M5OLprpkJUIrF8Lc9j">GPU Programming</a></li>
                        </ul>
                    </div>
                </div>
                <div class="col-md-6">
                    <h3 onclick="toggleResourceSection('blogposts')">
                        <i class="fa-solid fa-share-alt"></i>
                        Blogposts
                        <i class="fa-solid fa-circle-info"></i>
                        <i class="fa-solid fa-caret-right" id="blogposts-icon"></i>
                    </h3>
                    <div id="blogposts" style="display: none;">
                        <ul>
                            <li><a href="https://victorzhou.com/posts/linear-algebra-for-machine-learning/">Linear Algebra for Machine Learning</a></li>
                        </ul>
                    </div>
                </div>
            </div>

           <div class="row">
                <div class="col-md-6">
                    <h3 onclick="toggleResourceSection('social-media')">
                        <i class="fa-brands fa-square-twitter"></i>
                        Social Media Posts
                        <i class="fa-solid fa-circle-info"></i>
                        <i class="fa-solid fa-caret-right" id="social-media-icon"></i>
                    </h3>
                    <div id="social-media" style="display: none;">
                        <ul>
                            <li><a href="">Test</a></li>
                        </ul>
                    </div>
                </div>
                <div class="col-md-6">
                    <h3 onclick="toggleResourceSection('other-videos')">
                        <i class="fa-solid fa-video-camera"></i>
                        Other Videos
                        <i class="fa-solid fa-circle-info"></i>
                        <i class="fa-solid fa-caret-right" id="other-videos-icon"></i>
                    </h3>
                    <div id="other-videos" style="display: none;">
                        <ul>
                            <li><a href="https://www.youtube.com/watch?v=0QczhVg5HaI">Why Neural Networks can learn (almost) anything</a></li>
                            <li><a href="https://www.youtube.com/watch?v=b80by3Xk_A8">Stanford's CS224N: Hugging Face Tutorial</a></li>
                            <li><a href="https://www.youtube.com/watch?v=GetaI7KhbzM">GPU Programming with CUDA/C++</a></li>
                        </ul>
                    </div>
                </div>
            </div>

        </div>
    </div>

    <script>
        function toggleResources(id, unit) {
            const button = document.getElementById(id);
            const resourcesRow = document.getElementById(`resources-${id}`);
            const unitCell = document.getElementById(`unit-cell-${unit}`);

            if (resourcesRow.style.display === 'table-row') {
                button.classList.remove('fa-caret-down');
                button.classList.add('fa-caret-right');

                if (unitCell) { unitCell.rowSpan = unitCell.rowSpan - 1; }
                resourcesRow.style.display = 'none';
            } else {
                button.classList.remove('fa-caret-right');
                button.classList.add('fa-caret-down');

                if (unitCell) { unitCell.rowSpan = unitCell.rowSpan + 1; }
                resourcesRow.style.display = 'table-row';
            }
        }

        function fixAlternatingRows() {
            let topicRows = document.querySelectorAll(".topic-row");
            topicRows.forEach((row, index) => {
                if (index % 2 === 0) {
                    row.style.backgroundColor = "#f9f9f9";
                } else {
                    row.style.backgroundColor = "#ffffff";
                }
            });
        }

        document.querySelectorAll(".caret-icon").forEach(icon => {
            icon.addEventListener("click", function() {
                setTimeout(fixAlternatingRows, 200);
            });
        });

        document.addEventListener("DOMContentLoaded", fixAlternatingRows);

        function toggleResourceSection(id) {
            const resourcesDiv = document.getElementById(id);
            const icon = document.getElementById(`${id}-icon`);

            if (resourcesDiv.style.display === 'none' || resourcesDiv.style.display === '') {
                resourcesDiv.style.display = 'block';
                icon.classList.remove('fa-caret-right');
                icon.classList.add('fa-caret-down');
            } else {
                resourcesDiv.style.display = 'none';
                icon.classList.remove('fa-caret-down');
                icon.classList.add('fa-caret-right');
            }
        }
    </script>
